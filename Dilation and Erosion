## DILATION ##
import matplotlib
import numpy as np
from imageio import imread, imsave
from matplotlib import pyplot as plt 
%matplotlib inline

rgb_img = imread('coins.jpg')
plt.imshow(rgb_img)

R = rgb_img[:,:,0]
G = rgb_img[:,:,1]
B = rgb_img[:,:,2]
# python supports matrix operation
gray_img = 0.212670 * R + 0.715160 * G + 0.072169 * B
gray_img = np.uint8(gray_img)
plt.imshow(gray_img, cmap='gray')

thresholdvalue = 127
TF_matrix = (gray_img > thresholdvalue) 
threshold = TF_matrix * 255
print('* Unique pixel values in gray_img:', np.unique(gray_img))
print('* Unique pixel values in TF_matrix:', np.unique(TF_matrix))
print('* Unique pixel values in threshold:', np.unique(threshold))
plt.imshow(threshold, cmap='gray')

def convertWhiteAndBlack(img):
    return 255 - img

binary_img = np.array(convertWhiteAndBlack(threshold))
plt.imshow(binary_img, cmap='gray')

se = np.array([[1, 1, 1],
               [1, 1, 1],
               [1, 1, 1]])
print(se)

def preprocessing_padding_helper(img, kernel_size):
    pad_size = int(kernel_size / 2)
    # specify the pading for three dimensions
    # ((1,1), (1,1), (0,0)) => 1 padding for left and right, 
    #                          1 padding for top and bottom, 
    #                          no padding for color channels
    padding_2_dims = ((pad_size, pad_size), (pad_size, pad_size))
    img_padded = np.pad(img, padding_2_dims, 'constant', constant_values=0)
    print('*Padding: FROM ', img.shape,' TO ',img_padded.shape)
    return img_padded

binary_img_padded = preprocessing_padding_helper(binary_img, se.shape[0])

def dilation(binary_img, SE):
    if np.max(binary_img) == 255:
        binary_img = binary_img / 255
        
    dilated_img = np.zeros(binary_img.shape)
    #result_dilated = np.zeros(shape=(binary_img.size, binary_img[0].size))
    #print(binary_img.size, binary_img[0].size)
    #print(result_dilated.size, result_dilated[0].size)
    
    SE_size = SE.shape[0]
    radius = int(SE_size / 2)
    
    ##### REFLECT SE ######
    reversed_se = SE[::-1, ::-1]

    height_max, width_max  = binary_img.shape
    for row_idx in range(height_max):
        for col_idx in range(width_max):
            
            ################  TODO  ################# 
            # examine the image pixel by pixel to determine
            # which pixels should be included in the dilated result
            
            rowMax = row_idx + SE_size
            colMax = col_idx + se[0].size
            for row in range(row_idx - radius, rowMax - radius):
                for col in range(col_idx - radius, colMax - radius):
                    if (binary_img_padded[row][col] == 255):
                        dilated_img[row_idx][col_idx] = 255
            
    return np.array(dilated_img)

# Check the dilation effect against the original image
dilated_img = dilation(binary_img, se)
dilation_demo = np.concatenate((binary_img, dilated_img * 255),1)
print('LEFT: Raw Image    RIGHT: Dilation')
plt.imshow(dilation_demo, cmap='gray')

boundary = dilated_img * 255 - binary_img
plt.imshow(boundary, cmap='gray')

'''
    generate_results function is a helper function for you to generate
    the output images of lab exercise submission
    - Function Input: 
            -            wk:           int, indicates a specific week's lab exercise
            -          name:           str, the name of the student
            -           SID:           int, the SID of the student
            -       raw_img: numpy.ndarray, raw image
            -   output_imgs:          dict, stores the titles and outputs 
                                            as keys and values respectively.
                             i.e. you should store your outputs as {'[task name]':[numpy array],...}
                             
            -       channel:           int, the number of color channels
                             i.e. channel=1 indicates the images are grey images
                                  channel=3 indicates the images are RGB images
    - Function Usage:
            - Supply all the arguments with the correct types and a result image
              will be generated.
    - Tips:
            - You can right click the result image plot to save the image or 
              you can take a screenshoot for the submission.
'''
def generate_results(wk, name, SID, raw_img, output_imgs, channel):
    img_size = raw_img.shape
    x = img_size[0]
    y = img_size[1]
    
    # resize input image to a suitable size
    while x > 10:
        x /= (x / 10)
        y /= (y / 10)

    # Generate one axes each for the original image and all output images
    fig, axs = plt.subplots(1, len(output_imgs)+1, figsize=(x,y))
    
    # Plot the original image
    if channel == 1:
        axs[0].imshow(raw_img, cmap='gray')
    elif channel == 3:
        axs[0].imshow(raw_img)
    axs[0].text(0.5,-0.1, 'Original Image', size=12, ha="center", transform=axs[0].transAxes)
    axs[0].axis('off')
    
    # Plot each output image
    tasks = list(output_imgs.keys())
    for i in range(1,len(tasks)+1):
        if channel == 1:
            axs[i].imshow(output_imgs[tasks[i-1]], cmap='gray')
        elif channel == 3:
            axs[i].imshow(output_imgs[tasks[i-1]])
        axs[i].text(0.5,-0.1, tasks[i-1], size=12, ha="center", transform=axs[i].transAxes)
        axs[i].axis('off')

    fig.suptitle("Week %i Lab Exercise\n %s SID:%i"%(wk, name, SID),x=0.5,y=0.75)
    plt.tight_layout()
    plt.show()
    
    # Generate morphological processing results
dilated_img = dilation(binary_img, se) 
##########################
#eroded_img = erosion(binary_img, se) 
##########################
eroded_img = binary_img

# Now call generate_results() and provide the parameters as required
output_imgs = {'Dilated Image': dilated_img,
               'Eroded Image': eroded_img}
generate_results(3, 'Jessica Johanna Sun', 460233905, binary_img, output_imgs,1)
